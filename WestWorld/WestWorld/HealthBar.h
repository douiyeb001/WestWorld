#pragma once
#include <irrlicht.h>

using namespace irr;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A health bar. </summary>
///
////////////////////////////////////////////////////////////////////////////////////////////////////

class HealthBar : public scene::ISceneNode
{

	/// <summary>	The box. </summary>
	core::aabbox3d<f32> Box;
	/// <summary>	The vertices[ 6]. </summary>
	video::S3DVertex Vertices[6];
	/// <summary>	The material. </summary>
	video::SMaterial Material;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="parent">	[in,out] If non-null, the parent. </param>
	/// <param name="mgr">   	[in,out] If non-null, the manager. </param>
	/// <param name="id">	 	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	HealthBar(scene::ISceneNode* parent, scene::ISceneManager* mgr, s32 id);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Executes the register scene node action. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void OnRegisterSceneNode();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Renders this object. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void render();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets bounding box. </summary>
	///
	/// <returns>	The bounding box. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual const core::aabbox3d<f32>& getBoundingBox() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets material count. </summary>
	///
	/// <returns>	The material count. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual u32 getMaterialCount() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets a material. </summary>
	///
	/// <param name="i">	Zero-based index of the. </param>
	///
	/// <returns>	The material. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual video::SMaterial& getMaterial(u32 i);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a health. </summary>
	///
	/// <param name="health">	The health. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetHealth(int health);
};

