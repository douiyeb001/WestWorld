#pragma once

#include <irrlicht.h>
#include <vector3d.h>
#include <vector>
#include "SearchGrid.h"
#include "Opponent.h"

class PathFinding
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	PathFinding();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~PathFinding();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Searches for the first path. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="currentPosition">	The current position. </param>
	/// <param name="targetPosition"> 	Target position. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void FindPath(irr::core::vector3df currentPosition, irr::core::vector3df targetPosition);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Next path position. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="enemy">	[in,out] If non-null, the enemy. </param>
	///
	/// <returns>	An irr::core::vector3df. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	irr::core::vector3df NextPathPosition(Opponent* enemy);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears the open list. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ClearOpenList() { m_openList.clear(); }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears the visited list. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ClearVisitedList() { m_visitedList.clear(); }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears the path goal. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ClearPathGoal() { m_pathToGoal.clear(); }
	/// <summary>	True to initialized start goal. </summary>
	bool m_initializedStartGoal;
	/// <summary>	True to found goal. </summary>
	bool m_foundGoal;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets start and goal. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="start">	The start. </param>
	/// <param name="goal"> 	The goal. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetStartAndGoal(SearchGrid start, SearchGrid goal);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Path opened. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="x">	  	The x coordinate. </param>
	/// <param name="z">	  	The z coordinate. </param>
	/// <param name="newCost">	The new cost. </param>
	/// <param name="parent"> 	[in,out] If non-null, the parent. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void PathOpened(int x, int z, float newCost, SearchGrid *parent);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the next cell. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the next cell. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	SearchGrid *GetNextCell();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Continue path. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ContinuePath();

	/// <summary>	The start cell. </summary>
	SearchGrid *m_startCell;
	/// <summary>	The goal cell. </summary>
	SearchGrid *m_goalCell;
	/// <summary>	List of opens. </summary>
	std::vector<SearchGrid*> m_openList;
	/// <summary>	List of visited. </summary>
	std::vector<SearchGrid*> m_visitedList;
	/// <summary>	The path to goal. </summary>
	std::vector<irr::core::vector3df*> m_pathToGoal;
};

