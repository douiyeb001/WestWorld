#pragma once
#include <irrlicht.h>
#include "PlayerBase.h"
#include "AStar.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: irr
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace irr;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	An opponent. </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Opponent
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="node">		 	[in,out] If non-null, the node. </param>
	/// <param name="_ground">   	[in,out] If non-null, the ground. </param>
	/// <param name="playerCore">	[in,out] If non-null, the player core. </param>
	/// <param name="obstacles"> 	True to obstacles. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Opponent(scene::ISceneNode* node, scene::ISceneNode* _ground, PlayerBase* playerCore, bool obstacles[]);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~Opponent();
	/// <summary>	The enemy. </summary>
	scene::ISceneNode* enemy;
	PlayerBase* target;
	/// <summary>	True to active. </summary>
	bool active;
	/// <summary>	The speed. </summary>
	float speed;
	/// <summary>	The ground. </summary>
	scene::ISceneNode* ground;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Query if this object collides with the given ground. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="ground">	[in,out] If non-null, the ground. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool collidesWith(scene::ISceneNode* ground);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Collides with target. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="target">	Target for the. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void collidesWithTarget(PlayerBase target);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Despawns this object. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Despawn();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Damages the given target. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="target">	Target for the. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Damage(PlayerBase target);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates this object. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Update();
	/// <summary>	The pathfinder. </summary>
	AStar pathfind;
};