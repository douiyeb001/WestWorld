#pragma once
#include <irrlicht.h>
#include "GameStates.h"
#include "Sprite.h"

using namespace irr;
using namespace scene;
using namespace core;
using namespace video;

/// <summary>	The id of the state of the pause menu. </summary>
enum pauseStateID {
	RESUME = 0,
	RESTART = 1,
	MENU = 2,
	EXIT = 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file: PauseManager.h
//
// summary:	Declare the pause manager
////////////////////////////////////////////////////////////////////////////////////////////////////
class PauseManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="gui">  	The gui. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	PauseManager(IVideoDriver* driver, IGUIEnvironment* gui);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	~PauseManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Toggle pause. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void TogglePause();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Keyboard Event. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void KeyboardEvent(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Restart level. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void RestartLevel(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Go to start menu. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void GoToStartMenu(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Exit game. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ExitGame(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draw. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Draw();

	/// <summary>	Mouse indicator. </summary>
	Sprite* MouseIndicator;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Exit game. </summary>
	///
	/// <returns>	True if paused. Else false. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool IsGamePaused();
private:
	Sprite* menuScreen;
	int currentPauseId = 0;
	bool isPaused;
	
};

