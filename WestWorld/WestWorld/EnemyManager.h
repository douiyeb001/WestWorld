#pragma once
#ifndef EnemyManager_H
#define EnemyManager_H

#include <irrlicht.h>
#include <vector>
#include "Opponent.h" 
#include "Currency.h"
#include "Timer.h"

using namespace irr;
using namespace scene;
using namespace video;

////////////////////////////////////////////////////////////////////////////////////////////////////
// file: EnemyManager.h
//
// Manager for enemies.
////////////////////////////////////////////////////////////////////////////////////////////////////
class EnemyManager 
{
public:
	/// <summary>	Irrlicht's scene manager. </summary>
	ISceneManager* ismgr;
	/// <summary>	Irrlicht's triangle selector. </summary>
	ITriangleSelector* iselector;
	/// <summary>	The meta of Irrlicht's triangle selector. </summary>
	IMetaTriangleSelector* imeta;
	/// <summary>	Irrlicht's video driver. </summary>
	IVideoDriver* idriver;
	/// <summary>	The currency manager. </summary>
	Currency* cManager;

	EnemyManager(ISceneManager* smgr, ITriangleSelector* selector, IMetaTriangleSelector* meta, IVideoDriver* driver, Currency* cManager, Timer * pTimer);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	EnemyManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Check collision. </summary>
	///
	/// <param name="collidedObject">	[in,out] If non-null, the collided object. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CheckCollision(ISceneNode* collidedObject);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Give an array to the enemies. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	vector<Opponent*> GiveArray();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Fill the list with enemies. </summary>
	///
	/// <param name="enemy">	[in,out] If non-null, the enemies. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void FillList(Opponent* enemy);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	The Update. Which chekcs the range of the player  </summary>
	///
	/// <param name="PlayerRange">	[in,out] If non-null, the player range. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Update(std::vector<GridCell*> PlayerRange);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Remove the enemie from the list. </summary>
	///
	/// <param name="turretOpponent">	[in,out] If non-null, the turret opponent. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void RemoveFromArray(ISceneNode* turrentOpponent);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Fill the list. </summary>
	///
	///
	/// <param name="smgr">	[in,out] If non-null, the smgr. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void FillList(ISceneManager* smgr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~EnemyManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	The list with the enemies. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	vector<Opponent*> opponentList;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Update the enemies path. </summary>
	///
	/// <param name="newPath">	[in,out] If non-null, the new path. </param>
	/// <param name="changedCell">	[in,out] If non-null, the changed cell. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdatePath(std::vector<GridCell*> newPath, GridCell* changedCell);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	The timer for the enemies. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	Timer* p_Timer;
	
};
#endif



