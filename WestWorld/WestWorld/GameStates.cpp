#include "Game.h"
#include "GamePlayState.h"
//#include "TestLevelState.h"
#include "GameStates.h"

//#ifdef _DEBUG
//#undef THIS_FILE
//static char THIS_FILE[]=__FILE__;
//#define new DEBUG_NEW
//#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Default constructor </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

CGameState::CGameState()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Default destructor. </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

CGameState::~CGameState()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Overridden by subclass.  Change state, overridden by subclasses </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
/// <param name="pState">  	[in,out] If non-null, the state. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::ChangeState(CGameManager * pManager, CGameState * pState)
{
	pManager->ChangeState(pState);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Implemented by subclass Keyboard event for state, main keyboard events passed down by Game manager.  </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::KeyboardEvent(CGameManager* pManager)
{

}

//! 

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Implemented by subclass Mouse event for state, main mouse events passed down by Game manager.  </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::MouseEvent(CGameManager* pManager)
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Implemented by subclass Initialisation, loads data required for state.  </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::Init(CGameManager * pManager)
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Implemented by subclass Update, moves and renders screen. </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::Update(CGameManager * pManager)
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	C Implemented by subclass Clear, tidy up </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::Clear(CGameManager* pManager)
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	 Fades the screen In/Out </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
///
/// <param name="pManager">	[in,out] If non-null, the manager. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void CGameState::FadeInOut(CGameManager* pManager)
{
	// fade in and disable cursor
	pManager->getDevice()->getCursorControl()->setVisible(false);
	m_inOutFader = pManager->getDevice()->getGUIEnvironment()->addInOutFader();
	m_backColour.set(255,0,0,0); //255 90 90 156
	m_inOutFader->setColor(m_backColour);
	m_inOutFader->fadeIn(1500);
}
