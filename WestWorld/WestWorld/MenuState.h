#pragma once
#ifndef  MenuState_H
#define  MenuState_H

#include "GameStates.h"
#include "Sprite.h"

using namespace irr;
using namespace video;
using namespace core;

/// <summary>	The id of the state of the menu. </summary>
enum menuStateID {
	START = 0,
	CONTROLS = 1,
	QUIT = 2
};


////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	MenuState.h
//
// summary:	Declares UI for the currency
////////////////////////////////////////////////////////////////////////////////////////////////////
class MenuState : public CGameState
{

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Init(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clear this object. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Clear(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Update this object. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Update(CGameManager * pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Keyboard Event. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyboardEvent(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Mouse Event. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void MouseEvent(CGameManager* pManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Instance. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static MenuState* Instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual ~MenuState();

protected:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	MenuState();

	/// <summary>	The background sprite. </summary>
	Sprite* backgroundSprite;
	/// <summary>	The revolver Sprite. </summary>
	Sprite* revolverSprite;
	/// <summary>	The camera. </summary>
	ICameraSceneNode* m_pCamera;
	/// <summary>	The node. </summary>
	ISceneNode* m_pNode;
	/// <summary>	The mouse position. </summary>
	position2d<s32> m_MousePos;


	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Game manager. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void DisplayMouse(CGameManager* pManager);

	/// <summary>	Mouse mode. </summary>
	bool m_bMouseMode;
private:
	/// <summary>	The state of the menu. </summary>
	static MenuState m_MenuState; // singleton...
   /// <summary>	The currenct menu IDs. </summary>
	int currentMenuId = 0; // local game variables
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Mouse clicked. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void MouseClicked(CGameManager* pManager);


	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Switch the position of the mouse. </summary>
	///
	/// <param name="state">	0 = start, 1 = controls scheme, 2 = quit. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void switchMousePos(int state);

	/// <summary>	smgr. </summary>
	ISceneManager* ismgr;
};
#endif




