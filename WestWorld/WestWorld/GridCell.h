#pragma once
#include <vector>

#define Cell_Size 25
#define World_Size 2000

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GridCell.h
//
// summary:	Declares the grid cell
////////////////////////////////////////////////////////////////////////////////////////////////////

class GridCell {
public:
	/// <summary>	The path to cell. </summary>
	std::vector<GridCell*> pathToCell;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the f. </summary>
	///
	/// <value>	The f. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	float f;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the g. </summary>
	///
	/// <value>	The g. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// 
	float g;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the x coordinate. </summary>
	///
	/// <value>	The x coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int x;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the y coordinate. </summary>
	///
	/// <value>	The y coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int y;
	/// <summary>	True if there is an obstacle, false if not. </summary>
	bool obstacle;
	/// <summary>	True if is finding path, false if not. </summary>
	bool isFindingPath;
	/// <summary>	The parent. </summary>
	GridCell* parent;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Empty constructor. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GridCell() :parent(0) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="_x">	   	The x coordinate. </param>
	/// <param name="_y">	   	The y coordinate. </param>
	/// <param name="_parent"> 	[in,out] If non-null, the parent. </param>
	/// <param name="occupied">	True if occupied. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GridCell(int _x, int _y, GridCell* _parent, bool occupied) : parent((_parent) ? _parent : NULL), obstacle(occupied), g(0.0), f(0.0), x(_x), y(_y), pathToCell((_parent) ? (*_parent).pathToCell : std::vector<GridCell*>(0)), isFindingPath(true) {};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~GridCell();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assign parent. </summary>
	///
	/// <param name="_x">	   	The x coordinate. </param>
	/// <param name="_y">	   	The y coordinate. </param>
	/// <param name="goalX">   	The goal x coordinate. </param>
	/// <param name="goalY">   	The goal y coordinate. </param>
	/// <param name="_parent"> 	[in,out] If non-null, the parent. </param>
	/// <param name="diagonal">	True to diagonal. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void AssignParent(int _x, int _y, int goalX, int goalY, GridCell* _parent, bool diagonal);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Estimate remaining cost. </summary>
	///
	/// <param name="x">		The x coordinate. </param>
	/// <param name="y">		The y coordinate. </param>
	/// <param name="goalY">	The goal y coordinate. </param>
	/// <param name="goalX">	The goal x coordinate. </param>
	///
	/// <returns>	An int. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int EstimateRemainingCost(int x, int y, int goalY, int goalX);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clear everything. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Clear();

	bool PossibleNextCell();
};

