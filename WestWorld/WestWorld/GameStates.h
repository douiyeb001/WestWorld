
#if !defined(AFX_GAMESTATE_H_INCLUDED_)
#define AFX_GAMESTATE_H_INCLUDED_

#include <irrlicht.h>
#include "GameManager.h"

using namespace irr;
using namespace core;
using namespace scene;
using namespace video;
using namespace io;
using namespace gui;

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	CGameManager.h
//
// summary:	Declares the game manager
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameManager;

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	CGameState.h
//
// summary:	Declares the game state 
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameState
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Init(CGameManager* pManager) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates the given pManager. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Update(CGameManager* pManager) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears this object to its blank/initial state. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Clear(CGameManager* pManager) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Keyboard event. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyboardEvent(CGameManager* pManager) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Mouse event. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void MouseEvent(CGameManager* pManager) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~CGameState();

protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	CGameState();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Change state. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	/// <param name="pState">  	[in,out] If non-null, the state. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ChangeState(CGameManager* pManager, CGameState* pState);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Reinitialize state. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	/// <param name="pState">  	[in,out] If non-null, the state. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ReinitializeState(CGameManager* pManager, CGameState* pState);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Fade in out. </summary>
	///
	/// <param name="pManager">	[in,out] If non-null, the manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void FadeInOut(CGameManager* pManager);
	/// <summary>	Debounce. </summary>
	int m_iDebounce;
	/// <summary>	The in out fader. </summary>
	IGUIInOutFader* m_inOutFader;
	/// <summary>	The back colour. </summary>
	video::SColor m_backColour;

};

#endif


