#ifndef GUIBASE_H
#define GUIBASE_H

#include <irrlicht.h>
#include "currency.h"

using namespace irr;
using namespace core;
using namespace gui;
using namespace video;
using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	PlayerHealthBar.h
//
// summary: The health bar of the player
////////////////////////////////////////////////////////////////////////////////////////////////////

class PlayerHealthBar {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="bar">   	The bar. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	PlayerHealthBar(IVideoDriver* driver, char const* bar);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

private:
	/// <summary>	The hp bar. </summary>
	ITexture* hpBar;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Placeable.h
//
// summary:	Declares the class which is responsible for placing turrets and obstacles
////////////////////////////////////////////////////////////////////////////////////////////////////
class Placeable {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="icon">  	The icon. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Placeable(IVideoDriver* driver, char const* icon);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

private:
	/// <summary>	The placeable icon. </summary>
	ITexture * placeableIcon;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Reticle.h
//
// summary:	Declares the reticle
////////////////////////////////////////////////////////////////////////////////////////////////////

class Reticle {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="icon">  	The icon. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Reticle(IVideoDriver* driver, char const* icon);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);
private:
	/// <summary>	The sprite. </summary>
	ITexture * reticleSprite;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GameOverScreen.h
//
// summary:	Declares game over screen
////////////////////////////////////////////////////////////////////////////////////////////////////
class GameOverScreen {

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="deadLogo">  	The logo for dying. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GameOverScreen(IVideoDriver* driver, char const* deadLogo);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

	/// <summary>	The text. </summary>
	const wchar_t* deadText;


private:
	/// <summary>	The game over screen sprite. </summary>
	ITexture * GameOverSprite;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	VictoryScreen.h
//
// summary:	Declares victory screen
////////////////////////////////////////////////////////////////////////////////////////////////////

class VictoryScreen {

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="winLogo">  	Logo for winning. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	 VictoryScreen(IVideoDriver* driver, char const* winLogo);

	 ////////////////////////////////////////////////////////////////////////////////////////////////////
	 /// <summary>	Draws the given driver. </summary>
	 ///
	 /// <param name="driver">	[in,out] If non-null, the driver. </param>
	 ////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

	/// <summary>	The text. </summary>
	const wchar_t* deadText;


private:
	/// <summary>	The victory sprite. </summary>
	ITexture * VictorySprite;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	CurrencyUI.h
//
// summary:	Declares UI for the currency
////////////////////////////////////////////////////////////////////////////////////////////////////

class CurrencyUI {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="pDollar">  	The dollar symbol. </param>
	/// <param name="pInfinity">  	The infinity symbol. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	CurrencyUI(IVideoDriver* driver, char const* pDollar, char const* pInfinity);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IGUIEnvironment* gui, IVideoDriver* driver);

	/// <summary>	The text. </summary>
	const wchar_t* pText;
	/// <summary>	The score. </summary>
	const wchar_t* pScore;

private:

	/// <summary>	The static stext. </summary>
	IGUIStaticText * pStaticText;

	/// <summary>	The score text. </summary>
	IGUIStaticText* pScoreText;

	/// <summary>	The currency manager. </summary>
	Currency * cManager;

	/// <summary>	The texture with the dollar symbol. </summary>
	ITexture* pDollarTexture;

	/// <summary>	The texture with the infinity symbol. </summary>
	ITexture* pInfinityTexture;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	WaveCounterUI.h
//
// summary:	Declares UI of the wave counter
////////////////////////////////////////////////////////////////////////////////////////////////////

class WaveCounterUI
{
	public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="pDriver">	[in,out] If non-null, the driver. </param>
	/// <param name="pGUI">  	The GUI for the wave counter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	WaveCounterUI(IVideoDriver* pDriver, IGUIEnvironment * pGui);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="pDriver">	[in,out] If non-null, the driver. </param>
	/// <param name="pGui">	The GUI for the wave counter </param>
	/// <param name="waveNumber">	The amount of waves </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void Draw(IGUIEnvironment * pGui, IVideoDriver* pDriver,int waveNumber);

	/// <summary>	The font. </summary>
	IGUIFont* pFont;
	
private:

	/// <summary>	The text for the wave counter. </summary>
	IGUIStaticText * pWaveCounterText;
		
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	WaveCounter.h
//
// summary:	Declares wave counter
////////////////////////////////////////////////////////////////////////////////////////////////////

class WaveCounter {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="pWaveImage">  	The texture for the waves. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	WaveCounter(IVideoDriver* driver, char const* pWaveImage);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);
private:

	/// <summary>	The texture for the wave counter. </summary>
	ITexture * pWaveImage;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	DrawUI.h
//
// summary:	Declares wave counter
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawUI {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	DrawUI(IVideoDriver* driver);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="gui">	The Draw GUI. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver, IGUIEnvironment* gui);

private:

	/// <summary>	The player healthbar. </summary>
	PlayerHealthBar * pPlayerHealthBar;
	/// <summary>	The UI for the currency. </summary>
	CurrencyUI* pCurrencyUI;
	/// <summary>	The reticle. </summary>
	Reticle* pReticle;
	/// <summary>	The wave counter. </summary>
	WaveCounter* pWaveCounter;


};

#endif