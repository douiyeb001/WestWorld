#ifndef GUIBASE_H
#define GUIBASE_H

#include <irrlicht.h>
#include "currency.h"



////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: irr
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace irr;

////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: core
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace core;

////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: gui
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace gui;

////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: video
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace video;

////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: std
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A player health bar. </summary>
///
////////////////////////////////////////////////////////////////////////////////////////////////////

class PlayerHealthBar {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="bar">   	The bar. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	PlayerHealthBar(IVideoDriver* driver, char const* bar);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

private:
	/// <summary>	The hp bar. </summary>
	ITexture* hpBar;
};

class Placeable {
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	/// <param name="icon">  	The icon. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Placeable(IVideoDriver* driver, char const* icon);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draws the given driver. </summary>
	///
	/// <param name="driver">	[in,out] If non-null, the driver. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Draw(IVideoDriver* driver);

private:
	/// <summary>	The placeable icon. </summary>
	ITexture * placeableIcon;

};

class Reticle {
public:
	Reticle(IVideoDriver* driver, char const* icon);
	void Draw(IVideoDriver* driver);
private:
	ITexture * reticleSprite;
};
class GameOverScreen {

public:
	GameOverScreen(IVideoDriver* driver, char const* deadLogo);
	void Draw(IVideoDriver* driver);
	const wchar_t* deadText;


private:
	ITexture * GameOverSprite;

};


class CurrencyUI {
public:
	CurrencyUI(IVideoDriver* driver, char const* pDollar, char const* pInfinity);
	void Draw(IGUIEnvironment* gui, IVideoDriver* driver);
	const wchar_t* pText;
	const wchar_t* pScore;
private:

	IGUIStaticText * pStaticText;
	IGUIStaticText* pScoreText;
	Currency * cManager;
	ITexture* pDollarTexture;
	ITexture* pInfinityTexture;

};

class WaveCounter {
public:
	WaveCounter(IVideoDriver* driver, char const* pWaveImage);
	void Draw(IVideoDriver* driver);
private:
	ITexture * pWaveImage;

};
class DrawUI {
public:
	DrawUI(IVideoDriver* driver);
	void Draw(IVideoDriver* driver, IGUIEnvironment* gui);

private:
	PlayerHealthBar * pPlayerHealthBar;
	CurrencyUI* pCurrencyUI;
	Reticle* pReticle;
	WaveCounter *pWaveCounter;


};
#endif