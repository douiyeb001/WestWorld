
#ifndef AFX_GAMEMANAGER_H_INCLUDED_
#define AFX_GAMEMANAGER_H_INCLUDED_

#include <irrlicht.h>


using namespace irr;
using namespace core;
using namespace scene;
using namespace video;
using namespace io;
using namespace gui;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A game state. </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameState;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Manager for games. </summary>
///
/// <remarks>	Rache, 23-Apr-18. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameManager : public IEventReceiver
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates this object. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the device. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the device. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IrrlichtDevice* getDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the driver. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the driver. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IVideoDriver* getDriver();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets scene manager. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the scene manager. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneManager* getSceneManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets graphical user interface environment. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the graphical user interface environment. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IGUIEnvironment* getGUIEnvironment();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the selector. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the selector. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ITriangleSelector* GetSelector();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets collection manager. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the collection manager. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneCollisionManager* GetCollManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the meta. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the meta. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IMetaTriangleSelector* GetMeta();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the animation. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	Null if it fails, else the animation. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneNodeAnimator* GetAnim();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an animation. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="cam">	[in,out] If non-null, the camera. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAnim(ICameraSceneNode* cam);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the collision. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetCollision();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the mouse. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <returns>	The mouse. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	char GetMouse();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	CGameManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~CGameManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Executes the event action. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="event">	The event. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool OnEvent(const SEvent& event);

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Change state. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	///
	/// <param name="pState">	[in,out] If non-null, the state. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ChangeState(CGameState* pState);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Creates the device. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CreateDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Init();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A game state. </summary>
	///
	/// <remarks>	Rache, 23-Apr-18. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	friend class CGameState;
	/// <summary>	State of the game. </summary>
	CGameState* m_pGameState;
	/// <summary>	The device. </summary>
	IrrlichtDevice* m_pDevice;
	/// <summary>	The driver. </summary>
	IVideoDriver* m_pDriver;
	/// <summary>	Manager for scene. </summary>
	ISceneManager* m_pSceneManager;
	/// <summary>	The graphical user interface environment. </summary>
	IGUIEnvironment* m_pGUIEnvironment;
	/// <summary>	The selector. </summary>
	ITriangleSelector* selector;
	/// <summary>	Manager for collection. </summary>
	ISceneCollisionManager* collManager;
	/// <summary>	The meta. </summary>
	IMetaTriangleSelector* meta;
	/// <summary>	The animation. </summary>
	ISceneNodeAnimator* anim;

	/// <summary>	The mouse. </summary>
	char mouse;
};
#endif

