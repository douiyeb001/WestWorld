
#ifndef AFX_GAMEMANAGER_H_INCLUDED_
#define AFX_GAMEMANAGER_H_INCLUDED_

#include <irrlicht.h>
#include <irrKlang-64bit-1.6.0/include/irrKlang.h>


using namespace irr;
using namespace core;
using namespace scene;
using namespace video;
using namespace io;
using namespace gui;
using namespace irrklang;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A game state. </summary>
///
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameState;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Manager for games. </summary>
///
////////////////////////////////////////////////////////////////////////////////////////////////////

class CGameManager : public IEventReceiver
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates this object. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the device. </summary>
	///
	/// <returns>	Null if it fails, else the device. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IrrlichtDevice* getDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the driver. </summary>
	///
	///
	/// <returns>	Null if it fails, else the driver. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IVideoDriver* getDriver();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets scene manager. </summary>
	///
	/// <returns>	Null if it fails, else the scene manager. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneManager* getSceneManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets graphical user interface environment. </summary>
	///
	/// <returns>	Null if it fails, else the graphical user interface environment. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IGUIEnvironment* getGUIEnvironment();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the selector. </summary\>
	///
	/// <returns>	Null if it fails, else the selector. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ITriangleSelector* GetSelector();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets Collision manager. </summary>
	///
	/// <returns>	Null if it fails, else the collection manager. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneCollisionManager* GetCollManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the Meta Triangle Selector. </summary>
	///
	/// <returns>	Null if it fails, else the meta. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	IMetaTriangleSelector* GetMeta();

	ISoundEngine* GetSoundEngine();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the Iscene Node Animator. </summary>
	///
	/// <returns>	Null if it fails, else the animation. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ISceneNodeAnimator* GetAnim();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an animation. </summary>
	///
	/// <param name="cam">	[in,out] If non-null, the camera. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAnim(ICameraSceneNode* cam);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the collision. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetCollision();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the mouse. </summary>
	///
	/// <returns>	The mouse. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	char GetMouse();

	char GetKeyboard();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	CGameManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~CGameManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Executes the event action. </summary>
	///
	/// <param name="event">	The event. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool OnEvent(const SEvent& event);


	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Changing the current GameState to another GameState 
	/// Calls the cleanup method for the current state,
	/// Sets the current GameState to a new State which is specified in the parameter,
	/// Initializes the new state </summary>
	///
	/// <param name="pState"> The new GameState </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void ChangeState(CGameState* pState);


	void ReinitializeState(CGameState* pState);

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Creates the device. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CreateDevice();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static void Init();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A game state. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	friend class CGameState;
	/// <summary>	The current state the game is in. </summary>
	CGameState* gameState;
	/// <summary>	This is the most important class of the Irrlicht Engine. You can access everything in the engine 
	/// if you have a pointer to an instance of this class. There should be only one instance of this class at any time.</summary>
	IrrlichtDevice* device;
	/// <summary>	Interface to driver which is able to perform 2d and 3d graphics functions. </summary>
	IVideoDriver* driver;
	/// <summary>	The Scene Manager manages scene nodes, mesh recources, cameras and all the other stuff. </summary>
	ISceneManager* sceneManager;
	/// <summary>	GUI Environment. Used as factory and manager of all other GUI elements. </summary>
	IGUIEnvironment* guiEnvironment;
	/// <summary>	Interface to return triangles with specific properties. </summary>
	ITriangleSelector* selector;
	/// <summary>	he Scene Collision Manager provides methods for performing collision tests and picking on scene nodes. </summary>
	ISceneCollisionManager* collisionManager;
	/// <summary>	Interface for making multiple triangle selectors work as one big selector </summary>
	IMetaTriangleSelector* meta;
	/// <summary>	Animates a scene node. Can animate position, rotation, material, and so on. </summary>
	ISceneNodeAnimator* anim;
	ISoundEngine* engine = createIrrKlangDevice();

	/// <summary>	The mouse. </summary>
	char mouse;
	char keyboard;
};
#endif

